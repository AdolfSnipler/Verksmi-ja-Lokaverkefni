from myservo import myServo
import time
from machine import Pin, PWM
import asyncio

led1 = 4
led2 = 5
led_pin1 = Pin(led1, Pin.OUT)
led_pin2 = Pin(led2, Pin.OUT)

servo = myServo(9) # Pinninn sem servo-inn er tengdur við
teljari = 0
from machine import Pin
from time import sleep_ms
from umqtt.simple import MQTTClient

# ------------ Tengjast WIFI -------------
WIFI_SSID = "T Skoli Hotspot"
WIFI_LYKILORD = ""

def do_connect():
    import network
    wlan = network.WLAN(network.STA_IF)
    wlan.active(True)
    if not wlan.isconnected():
        print('connecting to network...')
        wlan.connect(WIFI_SSID, WIFI_LYKILORD)
        while not wlan.isconnected():
            pass
    print('network config:', wlan.ifconfig())
    
do_connect()

# ---------------- MQTT ------------------

MQTT_BROKER = "test.mosquitto.org"
CLIENT_ID = "Mottakari"
TOPIC = b"2480kynning" # Settu fyrstu fjóra stafinu úr kennitölunni þinni stað í X-anna

# Callback fall, keyrir þegar skilaboð berast með MQTT
def fekk_skilabod(topic, skilabod):
    print(f"TOPIC: {topic.decode()}, skilaboð: {skilabod}")
    return skilabod
    # ATH. skilaboðin berast sem strengur

mqtt_client = MQTTClient(CLIENT_ID, MQTT_BROKER, keepalive=60)
mqtt_client.set_callback(fekk_skilabod) # callback fallið skilgreint
mqtt_client.connect()
mqtt_client.subscribe(TOPIC)
async def mottaka_skilabod():
    checker = mqtt_client.check_msg()
    if checker != None:
        print("mjes")
    await asyncio.sleep(1)
    return checker
    if checker != None:
        print("mjes")
    
async def hreyfing():
    print("mjes")
    teljari = 80
    servo.myServoWriteAngle(teljari)
    await asyncio.sleep(1)
    led_pin2.value(1)
    led_pin1.value(1)
    teljari = teljari + 83
    servo.myServoWriteAngle(teljari)
    await asyncio.sleep(1)
    led_pin2.value(0)
    led_pin1.value(0)
    teljari = 0
    print("hreyfing")
            
async def senda_skilabod():
    checker = True
    if checker == True:
        skilabod = "do something!"
        mqtt_client.publish(TOPIC, skilabod)

async def main():
    while True:
        await asyncio.gather(mottaka_skilabod(), hreyfing(), senda_skilabod())
        await asyncio.sleep(0.1)  # allows some delay for other tasks

# At the bottom of your script, outside any function:
if __name__ == "__main__":
    asyncio.run(main())


